# Copyright (c) 2010 - Action Without Borders
#
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

{
	IS_FIFTH_GENERATION_BROWSER => {
		type => "BOOLEAN",
		value => q(isNastyOldBrowser),
		negate => q("YES"),
	},
	IS_SAFARI => {
		type => "BOOLEAN",
		value => q($self->context()->userAgent() =~ /Safari/),
	},
	IS_FIRST_TIME_LOADED => {
		type => "BOOLEAN",
		value => q(isFirstTimeLoaded),
	},
	UNIQUE_NAME => {
		type => "STRING",
		value => q(uniqueName),
	},
	SEPARATOR => {
		type => "STRING",
		value => q(separator),
	},
	VALUES => {
		type => "LOOP",
		list => q(values),
		item => q(aValue),
		index => q(valueIndex),
	},
	VALUE => {
		type => "STRING",
		value => q(aValue),
		filter => q(filterNewLinesAndQuotes),
	},
	FIELDS => {
		type => "LOOP",
		list => q(fields),
		item => q(aField),
		index => q(fieldIndex),
	},
	FIELDS_FOR_DOPEY_BROWSER => {
		type => "LOOP",
		list => q(fieldsForDopeyBrowser),
		item => q(aField),
		index => q(fieldIndex),
	},
	FIELD_INDEX => {
		type => "STRING",
		value => q(fieldIndex),
	},
#	FIELD => {
#		type => "CONSUMER",
#		value => q(editor),
#		bindings => {
#			value => q(fieldValue),
#			name => q(fieldName),
#			allowsNoSelection => q(allowsNoSelection),
#			pageContextNumberRoot => q(nextPageContextNumber), # needed because consumer isn't known until rendering time
#			shouldEnableClientSideScripting => q("1"),
#		},
#	},
#	EDITOR => {
#		type => "CONSUMER",
#		value => q(editor),
#		bindings => {
#			name => q(uniqueId),
#			allowsNoSelection => q(allowsNoSelection),
#			pageContextNumberRoot => q(nextPageContextNumber), # needed because consumer isn't known until rendering time
#			shouldEnableClientSideScripting => q("1"),
#		},
#	},
	FIELD => {
		type => "SwitchComponent",
		bindings => {
			switchComponentName => q(editor),
			value => q(fieldValue),
			name => q(fieldName),
			allowsNoSelection => q(allowsNoSelection),
			shouldEnableClientSideScripting => q("1"),
		},
	},
	EDITOR => {
		type => "SwitchComponent",
		bindings => {
			switchComponentName => q(editor),
			name => q(uniqueId),
			allowsNoSelection => q(allowsNoSelection),
			shouldEnableClientSideScripting => q("1"),
		},
	},
	HAS_FIELD_LABEL => {
		type => "BOOLEAN",
		value => q(hasFieldLabel),
	},
	FIELD_LABEL => {
		type => "STRING",
		value => q(fieldLabel),
	},
	USER_CAN_CHANGE_SIZE => {
		type => "BOOLEAN",
		value => q(userCanChangeSize),
	},
	IS_BELOW_MAXIMUM => {
		type => "BOOLEAN",
		value => q($self->maximumNumberOfFields() == 0 || scalar @{$self->values()} < $self->maximumNumberOfFields()),
	},
	IS_ABOVE_MINIMUM => {
		type => "BOOLEAN",
		value => q(scalar @{$self->values()} >= $self->minimumNumberOfFields()),
	},
	MAXIMUM => {
		type => "NUMBER",
		value => q(maximumNumberOfFields),
	},
	MINIMUM => {
		type => "NUMBER",
		value => q(minimumNumberOfFields),
	},
	STARTING_NUMBER_OF_FIELDS => {
		type => "NUMBER",
		value => q(startingNumberOfFields),
	},

}
