# Copyright (c) 2010 - Action Without Borders
#
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

#
{
    HAS_PROTOCOL => {
        type => "BOOLEAN",
        value => q(protocol),
    },
    PROTOCOL => {
        type => "STRING",
        value => q(protocol),
    },
    HAS_SERVER => {
        type => "BOOLEAN",
        value => q(server),
    },
    SERVER => {
        type => "STRING",
        value => q(server),
    },
    ACTION => {
        type => "STRING",
        value => q(action),
    },
    HAS_URL => {
        type => "BOOLEAN",
        value => q(url)
    },
    URL => {
        type => "STRING",
        value => q(url),
    },
    ANCHOR => {
        type => "STRING",
        value => q(anchor),
    },
    HAS_ANCHOR => {
        type => "BOOLEAN",
        value => q(anchor)
    },
    HAS_QUERY_DICTIONARY => {
        type => "BOOLEAN",
        value => q(hasQueryDictionary),
    },
    QUERY_DICTIONARY => {
        type => "LOOP",
        list => q(queryDictionaryKeyValuePairs),
        item => q(aKeyValuePair),
    },
    NAME => {
        type => "STRING",
        value => q(aKeyValuePair.NAME),
        filter => q(escapeQueryStringValue),
    },
    VALUE => {
        type => "STRING",
        value => q(aKeyValuePair.VALUE),
        filter => q(escapeQueryStringValue),
    },
    DIRECT_ACTION => {
        type => "STRING",
        value => q(directAction),
    },
}