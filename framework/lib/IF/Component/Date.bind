# Copyright (c) 2010 - Action Without Borders
#
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# bindings for the Date component
{
    YEAR => {
        type => "STRING",
        value => q($self->year()),
    },
    MONTH => {
        type => "STRING",
        value => q(""._s("MONTH_".$self->month())),
    },
    DAY => {
        type => "STRING",
        value => q(int($self->day())),
    },
    FORMAT_IS_ISO => {
        type => "BOOLEAN",
        value => q($self->format() eq "ISO"),
    },
    FORMAT_IS_MONTH_DAY => {
        type => "BOOLEAN",
        value => q($self->format() eq "MONTH_DAY"),
    },
    FORMAT_IS_MMM_DD_YYYY => {
        type => "BOOLEAN",
        value => q($self->format() eq "MMM_DD_YYYY" ||
                    $self->format() eq "DDD_MMM_DD_YYYY"),
    },
    FORMAT_IS_MMM_DD => {
        type => "BOOLEAN",
        value => q($self->format() eq "MMM_DD"),
    },
    SHOULD_SHOW_NAME_OF_DAY_OF_WEEK => {
        type => "BOOLEAN",
        value => q($self->format() eq "DDD_MMM_DD_YYYY" || $self->shouldShowNameOfDayOfWeek()),
    },
    MM => {
        type => "NUMBER",
        value => q($self->month()),
        format => q("%02d"),
    },
    MMM => {
        type => "STRING",
        value => q("".substr(""._s("MONTH_".$self->month()), 0, 3)),
    },
    DD => {
        type => "NUMBER",
        value => q($self->day()),
        format => q("%02d"),
    },
    NAME_OF_DAY_OF_WEEK => {
        type => "STRING",
        value => q(nameOfDayOfWeek),
    },
}
