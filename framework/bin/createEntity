#!/usr/bin/env perl

# Copyright (c) 2010 - Action Without Borders
#
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

use lib qw(lib conf bin);

use strict;
use IF::Model;
use AppControl::Utility;
use IFKit::EntityGenerator;
use HTML::Template;
use Getopt::Long;

my $entityName;
my $buildInitMethod = 0;
my $buildStubClass = 0;
my $tree;
my $force = 0;
my $application;
my $appConfigPath;
my $silent = 0;

GetOptions("application=s" => \$application,
           "app-config-path=s" => \$appConfigPath,
           "entity=s" => \$entityName,
		   "tree=s" => \$tree,
		   "build-init-method" => \$buildInitMethod,
		   "build-stub-class" => \$buildStubClass,
		   "silent" => \$silent,
		   "force" => \$force);

unless ($entityName && $application) {
	usage();
	exit(1);
}

if ($application eq "IFTest") {
	use lib 't';
}

# load app config:
my $appConfigClassName = AppControl::Utility::loadAppConfig($application, $appConfigPath);

no strict 'refs';
my $appRoot = ${$appConfigClassName."::APP_ROOT"};
$application ||= ${$appConfigClassName."::APP_NAME"};

die "No app root specified" unless $appRoot;

# Load the app class
use lib '$appRoot';
eval "use ".$application."::Application;";
die $@ if $@;

# yikes
$tree ||= $application;

# TODO Change the template dir.
my $entityGenerator = IFKit::EntityGenerator->new(AppControl::Utility::configurationValueForKey("FRAMEWORK_ROOT")."/bin/templates");

# Generate the DB entity
my $entityClassFile = AppControl::Utility::configurationValueForKey("APP_ROOT")."/$tree/Entity/Model/_$entityName.pm";

my $entityRepresentation = $entityGenerator->parseExistingEntityClass($entityClassFile);
my $model = IF::Model->defaultModel();
my $entityClassTemplate = $entityGenerator->generateEntityClassFromRepresentationAndModel($entityName, $entityRepresentation, $model);

# Push the basics into the template
$entityClassTemplate->param(TREE => $tree);
$entityClassTemplate->param(CLASS => "Model::_$entityName");
$entityClassTemplate->param(BUILD_INIT_METHOD => $buildInitMethod);

# stub
my $stubEntityClassFile = AppControl::Utility::configurationValueForKey("APP_ROOT")."/$tree/Entity/$entityName.pm";

# if there's no entity class file, we check
# if we need to build the stub class too
if (! -f $entityClassFile && ! -f $stubEntityClassFile) {
	$buildStubClass = 1;
}

if ($force || !(-f $entityClassFile)) {
	$entityGenerator->saveTemplateToFile($entityClassTemplate, $entityClassFile);
	feedback("Created entity file $entityClassFile");
} else {
	print STDERR "Not creating file $entityClassFile, already exists.  To overwrite, use --force\n" unless $silent;
}

if ($buildStubClass) {
	# Generate the DB entity
	$entityClassFile = AppControl::Utility::configurationValueForKey("APP_ROOT")."/$tree/Entity/$entityName.pm";

	$entityRepresentation = $entityGenerator->parseExistingEntityClass($entityClassFile);
	$entityClassTemplate = $entityGenerator->generateStubEntityClassFromRepresentationAndModel($entityName, $entityRepresentation, $model);

	# Push the basics into the template
	$entityClassTemplate->param(TREE => $tree);
	$entityClassTemplate->param(CLASS => $entityName);
	$entityClassTemplate->param(BUILD_INIT_METHOD => $buildInitMethod);

	if ($force || !(-f $entityClassFile)) {
		$entityGenerator->saveTemplateToFile($entityClassTemplate, $entityClassFile);
		feedback("Created stub file $entityClassFile");
	} else {
		print STDERR "Not creating stub file $entityClassFile, already exists.  To overwrite, use --force\n" unless $silent;
	}
}


#==============================================
# End of main program
#==============================================

sub usage {
	print <<EOU;

usage: createEntity --entity=<entity> --tree=<tree> [--force]
                    [--build-init-method] [--build-stub-class]

       entity        : derive entity information from the pmodel
       tree          : which tree to place the entity in
       --build-init-method : builds a method in the entity that initialises
                             the entity with default values from the pmodel
       --build-stub-class  : builds stub class for this entity
       --force             : forces creation of files even if they already exist

example:
	% createEntity --application=MyApp --entity=Banana --tree=MyApp

EOU
}

sub feedback {
	my ($string) = @_;
	return if $silent;
	print "$string\n";
}
