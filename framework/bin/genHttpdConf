#!/usr/bin/env perl

# Copyright (c) 2010 - Action Without Borders
#
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

use lib qw(lib conf lib/Root bin);

use strict;
use IF::Config;
use IF::Log;
use AppControl::Utility;
use Getopt::Long;

my $application;
my $apache22;
my $debug;

GetOptions("application=s" => \$application,
            'debug' => \$debug,
            'apache22' => \$apache22
            );

usage() unless $application;

my $appConfigClassName = AppControl::Utility::loadAppConfig($application);

no strict 'refs';
my $config = ${$appConfigClassName."::CONFIGURATION"};
my $frameworkConfig = $IF::Config::CONFIGURATION;

my $cmdline = join(" ", @_);
my $user = $config->{APACHE_USER} || 'nobody';
my $rootPath = $config->{APP_ROOT};
my $frameworkPath = $frameworkConfig->{FRAMEWORK_ROOT};

my $httpdConf = header();
foreach my $type (@{$config->{APACHE_INSTANCES}}) {
	$httpdConf .= eval "$type ();";
}

print $httpdConf if $debug;

my $confFilePath = "$rootPath/conf/ACTIVE/_httpd.conf";

open CONF, "> $confFilePath"
	or die "can't open $confFilePath: $!";
print CONF $httpdConf;
close CONF;

print "Generated conf file: $confFilePath\n";

# link libexec

my $moduleLinkPath = $rootPath."/conf/ACTIVE/libexec";
my $moduleLinkTarget = $config->{MODULE_PATH};
unlink $moduleLinkPath;
print `ln -s $moduleLinkTarget $moduleLinkPath`;

exit;

#------

sub formatMemcacheServerList {
	my $servers;
	foreach my $entry (@{$frameworkConfig->{MEMCACHED_SERVERS}->{Page}}) {
		next unless length $entry;
		push @$servers, $entry;
	}
	my $serverList = join(" ", @$servers);
	return $serverList;
}

sub header {
	my ($confPath, $modulePath);
	if ($apache22) {
		$confPath = "conf/apache22";
		$modulePath = "conf/apache22";
	} else {
		$confPath = "conf/apache";
		$modulePath = "conf/apache";
	}

	return <<"EOC";
# httpd.conf for $config->{ENVIRONMENT}
#
#  NOTE:  This file is automatically generated by:
#				$0

ServerRoot  $rootPath

include $modulePath/modules.conf
include $confPath/macros.conf

EOC
}

sub CACHE {
    my $host = $config->{HOSTNAME};
    my $addr = $config->{ADDR} || "*";
    my $port = $config->{PORT} || "80";
    my $baddr = $config->{APPSRVR_ADDR};
    my $bport = $config->{APPSRVR_PORT} || "8077";
    my $maxClients = $config->{MAX_PROCS} || "120";
    my $memcacheServers = formatMemcacheServerList();

return <<"EOC";
<IFDefine CACHE>
  #           servername | addr to listen | port to listen | httpd user | project root
        Use IFApacheConfig $host $addr $port $user $rootPath
  #           project root | max clients | backend addr | backend port
        Use IFCacheConfig $application $frameworkPath $rootPath $maxClients $baddr $bport
  #      Use IFMemcacheConfig "$memcacheServers"
</IFDefine>
EOC
}

sub MOD_PERL {
	my $bhost = $config->{APPSRVR_HOSTNAME};
	my $baddr = $config->{APPSRVR_ADDR};
	my $bport = $config->{APPSRVR_PORT} || "80";
	my $maxClients = $config->{MAX_PROCS} || "40";
	my $maxReq = $config->{MAX_REQUESTS} || "2000";
	my $maxSize = $config->{MAX_PROC_SIZE} || "300000";
	my $logMask = $config->{LOG_MASK};
	my $memcacheServers = formatMemcacheServerList();

return <<"EOC";
<IFDefine PERL>
   #           servername | addr to listen | port to listen | httpd user | project root
   Use IFApacheConfig $bhost $baddr $bport $user $rootPath
   Use IFModPerlConfig $application $frameworkPath $rootPath $maxClients $maxReq $maxSize $logMask
	<IfDefine MOD_CACHE_WITH_MOD_PERL>
		use IFMemcacheConfig "$memcacheServers"
	</IfDefine>
</IFDefine>
EOC
}

sub usage {
	print STDERR <<EOU
You must pass an application name.
EOU
	;
	exit (1);
}
1;