#!/usr/bin/env perl

# Copyright (c) 2010 - Action Without Borders
#
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

use lib qw(lib conf ../applications bin);

use strict;
use IF::DB;
use IF::Log;
use IF::Mailer;
use IF::MailQueue;
use AppControl::Utility;
use Getopt::Long;

my $applicationName;
my $emailField = "EMAIL";
my $iteratorClass = "IF::MailQueue::MailIterator";
my $query;
my $debug;
my $jobEmailsTo;
my $messageFile;
my $subject;
my $from;
my $limit;
my $noMail = 0;
my $arguments = {};
my $fieldMap = {};
my $shouldTest = 0;

my $commandLine = join(" ", $0, @ARGV);
my $result = GetOptions( "application=s" => \$applicationName,
            "email-field=s" => \$emailField,
            "query=s" => \$query,
            "iterator-class=s" => \$iteratorClass,
            "message-file=s" => \$messageFile,
            "subject=s" => \$subject,
            "from=s" => \$from,
            "limit=s" => \$limit,
            "job-emails-to=s" => \$jobEmailsTo,
            "no-mail" => \$noMail,
            "debug" => \$debug,
            "test" => \$shouldTest,
            "argument=s" => $arguments,
            "map=s" => $fieldMap);

usage() unless ($result && $applicationName && $emailField && $messageFile && $from && $jobEmailsTo);

# app loading gunk.  I wish I could abstract this away somewhere nice.
my $applicationClass = $applicationName."::Application";
if ($applicationName eq "IFTest") {
    unshift @INC, "t";
} else {
    unshift @INC, "../applications/$applicationName";
}

print "Loading app config...\n";
my $appConfigClassName = AppControl::Utility::loadAppConfig($applicationName, undef);
$ENV{'APP_ROOT'}       = AppControl::Utility::configurationValueForKey('APP_ROOT');
$ENV{'FRAMEWORK_ROOT'} = AppControl::Utility::configurationValueForKey('FRAMEWORK_ROOT');
print "App root is $ENV{'APP_ROOT'}, framework is $ENV{'FRAMEWORK_ROOT'}\n";

# this sets up all the include paths
require "AppControl/Perl5Lib.pl";

eval "use $applicationClass;";
if ($@) {
    IF::Log::error($@);
    exit(1);
}
# ---- blech ----


if ($shouldTest) {
    $debug = 1;
}
if ($debug) {
    IF::Log::setLogMask(0xffff);
} else {
    IF::Log::setLogMask(0);
}

if ($debug && !$limit) {
    IF::Log::error("You cannot run in debug mode without a limit, or you will send all the generated messages to $jobEmailsTo, and they probably won't appreciate it.");
    exit(1);
}
unless ($subject) {
    IF::Log::warning("No subject set for outgoing message.  If it's not set in the message, you will get a blank subject");
}

# import the iterator class:
eval "use $iteratorClass;";
if ($@) {
    IF::Log::error($@);
    exit (3);
}
my $iterator = $iteratorClass->new();
unless ($iterator) {
    IF::Log::error("Couldn't create iterator");
    exit (4);
}
$iterator->initWithQuery($query);

# push any arguments into the iterator
foreach my $argument (@{$iterator->possibleArguments()}) {
    if ($arguments->{$argument}) {
        $iterator->setArgumentForKey($arguments->{$argument}, $argument);
    }
}

my $messageContents;

if (open (MESSAGE, $messageFile)) {
    $messageContents = join("", <MESSAGE>);
    IF::Log::debug($messageContents);
    close (MESSAGE);
} else {
    IF::Log::error("No such file $messageFile");
    exit(2);
}

if ($shouldTest) {
    $iterator->beginTest();
}
$iterator->setFieldMap($fieldMap);
$iterator->begin();

my $sendCount = 0;
my $message = IF::Mailer::createMailMessage($subject, $messageContents, "text/plain", {}) unless ($noMail);
my $job = IF::Mailer::startMailJob($subject." - ".$commandLine, $jobEmailsTo) unless ($noMail);
while (my $row = $iterator->nextResult()) {
    $row = $iterator->addMappedFields($row);
    IF::Mailer::addMailQueueEntry( ($debug? $jobEmailsTo : $row->{$emailField}),
                                        $from,
                                        $message,
                                        $row,
                                        time,
                                        $job,
                                        ) unless ($noMail);
    $sendCount++;
    last if ($limit && $sendCount > $limit);
}
IF::Mailer::endMailJob($job) unless ($noMail);
IF::Log::info("Added $sendCount messages to the mail queue\n");

$iterator->end();

if ($shouldTest) {
    $iterator->endTest();
}

sub usage {
    print <<EOU;
usage: sendMessageToResultSet --application=<application>
            <--email-field=<EMAIL>>
            <--message-file=<FILE>>
            <--query="<QUERY>" | --iterator-class="<IteratorClass>">
            <--from=<FROM>>
            <--job-emails-to=<EMAIL>>
            [--no-mail]
            [--limit=<LIMIT>]
            [--subject=<SUBJECT>]
            [--debug]
            [--test]
            [[--argument key=value] [--argument key=value] ...]
            [[--map key=value] [--map key=value] ...]

test: if your MailIterator implements beginTest() and endTest()
      then they will be called first and last. It automatically
      enables --debug too, to prevent any bad mistakes.
EOU
    exit(0);
}

